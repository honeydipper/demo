workflows:
  tf_plan:
    content: run_kubernetes
    data:
      '*steps':
        - git-clone
        - name: plan
          type: tf
          workingDir: /honeydipper/git/terraform
          script: |
            terraform init -no-color
            terraform plan -no-color

  tf_apply:
    content: run_kubernetes
    data:
      '*steps':
        - git-clone
        - name: apply
          type: tf
          workingDir: /honeydipper/git/terraform
          script: |
            terraform init -no-color
            echo Applying...
            terraform apply -no-color -auto-approve

  tf_PR_run:
    content: pipe
    data:
      on_error: final
      '*steps':
        - name: create commit status msg
          work:
            type: function
            content:
              target:
                system: github
                function: createStatus
            data:
              status:
                state: pending
                description: Running tf {{ .wfdata.action }}...
              context: honeydipper/tf-{{ .wfdata.action }}
        - name: run tf {{ .wfdata.action }}
          work:
            content: tf_{{ .wfdata.action }}
            data:
              system: job_runner
              branch: '{{ coalesce .wfdata.branch .event.json.pull_request.head.ref }}'
              timeout: '1800'
        - name: formatting {{ .wfdata.action }} output
          work:
            type: data
            content:
              work_data:
                kube_job_status: '{{ `{{ .data.kube_job_status }}` }}'
              log: >-
                {{
                `{{ index (values .data.log | first) (.wfdata.action | printf "step-%s") |
                replace "&" "&amp;" |
                replace "<" "&lt;" |
                replace ">" "&gt;" |
                printf "<details><summary>Initialzing</summary><pre><code>%s" |
                replace "Refreshing Terraform state in-memory prior to plan..." "</code></pre></details><details><summary>Refreshing</summary><pre><code>" |
                replace "----\n\nAn execution plan has been generated" "----\n\n</code></pre></details><details><summary>Plan</summary><pre><code>An execution plan has been generated" |
                replace "\nApplying..." "</code></pre></details>\n<details><summary>Apply</summary><pre><code>" |
                replace "the following actions:\n\n" "the following actions:\n\n  " |
                replace "\n  +" "\n  <img src='https://placehold.it/30x10/c5f015/000000?text=+'></img> +" |
                replace "\n  ~" "\n  <img src='https://placehold.it/30x10/f4d03f/000000?text=+'></img> ~" |
                replace "\n  -" "\n  <img src='https://placehold.it/30x10/c70039/000000?text=+'></img> -" |
                replace "\nWarning: " "\n<img src='https://placehold.it/30x10/f4d03f/000000?text=+'></img> Warning: " |
                replace "\nError: " "\n<img src='https://placehold.it/30x10/c70039/000000?text=+'></img> Error: " |
                replace "\nPlan:" "\n\n<img src='https://placehold.it/30x10/3933ff/000000?text=+'></img> <strong>Plan: " |
                replace "to destroy.\n" "to destroy.</strong>\n" |
                replace "\n" "<br/>\n" |
                printf "%s</code></pre></details>"
                }}`
                }}
                {{ eq .wfdata.action "plan" | ternary
                "\n\n<img src='https://placehold.it/30x10/3933ff/000000?text=+'></img> Type `/honeydipper tf apply` to apply the plan.
                \n\n<img src='https://placehold.it/30x10/c70039/000000?text=+'></img> You are responsible to ensure that no conflict is introduced after your last plan."
                ""
                }}
        - name: send {{ .wfdata.action }} output to PR comment
          work:
            type: function
            content:
              target:
                system: github
                function: createComment
            data:
              message: '{{ `{{ .data.log }}` }}'
        - name: finalize commit status
          work:
            type: function
            content:
              target:
                system: github
                function: createStatus
            data:
              status:
                state: '{{ `{{ and (empty .wfdata.step) (eq (default "" .wfdata.work_data.kube_job_status) "true") | ternary "success" "failure" }}` }}'
                description: Honeydipper tf {{ .wfdata.action }}  {{ `{{ and (empty .wfdata.step) (eq (default "" .wfdata.work_data.kube_job_status) "true") | ternary "succeeded" "failed" }}` }}
              context: honeydipper/tf-{{ .wfdata.action }}
