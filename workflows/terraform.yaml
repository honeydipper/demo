workflows:
  tf_plan:
    content: run_kubernetes
    data:
      '*steps':
        - git-clone
        - name: plan
          type: tf
          workingDir: /honeydipper/git/terraform
          script: |
            terraform init -no-color
            terraform plan -no-color

  tf_plan_with_pr:
    content: pipe
    data:
      on_error: final
      '*steps':
        - name: create commit status msg
          work:
            type: function
            content:
              target:
                system: github
                function: createStatus
            data:
              status:
                state: pending
                description: Honeydipper is running tf plan...
                context: honeydipper/tf-plan
        - name: run tf plan
          work:
            content: tf_plan
            data:
              system: job_runner
              branch: '{{ .event.json.pull_request.head.ref }}'
        - name: formatting plan output
          work:
            type: data
            content:
              work_data:
                kube_job_status: '{{ `{{ .data.kube_job_status }}` }}'
              log: |
                {{
                  `{{ index (values .data.log | first) "step-plan" |
                    replace "Initializing the backend..." "<details><summary>Initializing</summary><p>" |
                    replace "remind you to do so if necessary." "remind you to do so if necessary.</p></details>" |
                    replace "Refreshing Terraform state in-memory prior to plan..." "<details><summary>Refreshing</summary><p>" |
                    replace "----\\n\\nAn execution plan has been generated" "----\\n\\n</p></details><details><summary>Plan</summary><p>An execution plan has been generated" |
                    replace "----\\n\\nNote:" "----\\n\\n</p></details>Note:"
                  }}`
                }}
        - name: send plan output to PR comment
          work:
            type: function
            content:
              target:
                system: github
                function: createComment
            data:
              message: '{{ `{{ .data.log }}` }}'
        - name: finalize commit status
          work:
            type: function
            content:
              target:
                system: github
                function: createStatus
            data:
              status:
                state: '{{ `{{ and (empty .wfdata.step) (eq (default "" .wfdata.work_data.kube_job_status) "true") | ternary "success" "failure" }}` }}'
                description: Honeydipper tf plan {{ `{{ and (empty .wfdata.step) (eq (default "" .wfdata.work_data.kube_job_status) "true") | ternary "succeeded" "failed" }}` }}
                context: honeydipper/tf-plan
  tf_apply:
    content: run_kubernetes
    data:
      '*steps':
        - git-clone
        - type: tf
          workingDir: /honeydipper/git/terraform
          script: |
            terraform init -no-color
            terraform apply -no-color -auto-approve
